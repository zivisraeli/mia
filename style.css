/* by default, the browser sets some marging. I eliminate it. */
body {
  background-color: #ebebeb;
  margin: 0;
}

/* ========================================================================== 
  - using flex so elements follow each other horizontally. later on - vertically.
  - sticky position is preferable over fixed since it keeps the element part of the flow. 
  - width of the entire screen
  - z-index will make it on top of any other element (the position property removes it from the normal flow.)
========================================================================== */
header {
  display: flex;
  position: sticky;
  top: 0;
  background: linear-gradient(to right, orange, yellow);
  font-family: Oswald;
  font-size: 1.5em;
  border-top: 1px solid gray;
  border-bottom: 1px solid gray;
  width: 100%;
  height: 110px;
  z-index: 1;
}


/* header-img's border-radius makes the image round. */
.header-img {
  width: 100px;
  border: 1px solid black;
  border-radius: 50%;
  position: absolute;
  left: 150px;
  top: 5px;
}

/* ========================================================================== 
  - flex would allow me later on to arrange them vertically.
  - margin-left:auto;  would push the element all the way to the right. 
  - "auto" : taking up available space!!!!!!
  - the 100% height would strech the div element to the height of its container.
  - under 600px flex elements are vertically ordered and centered through margin property.
========================================================================== */
nav {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 150px;
  margin-left: auto;
  height: 100%;

}

/* the nav elements should be placed vertically and in the center on small screens */
@media screen and (max-width: 900px) {
  header {
    justify-content: center;
  }

  nav {
    flex-direction: column;
    margin: 0px;
  }

  .header-img {
    left: 50px;
  }
}

/* ========================================================================== 
For the top navigation menu anchors:
  - no underline 
  - font size depends on the viewport width 
  - I need to  use padding and not margin to show a gap with the border
  - vertical line separator through border-right
========================================================================== */
nav a {
  text-decoration: none;
  font-size: 3vw;
  padding-left: 20px;
  padding-right: 20px;
  color: black;
  height: auto;
  border-right: 2px solid black;
}

/* so the last menu entry doesn't have a vertical line */
nav a:last-child {
  border-right: none;
}

nav a:hover {
  background-color: white;
  color: orange;
}

@media screen and (max-width: 900px) {
  nav a {
    font-size: 2.5vw;
    padding: 2px;
    border: none;
  }
}

main {
  text-align: center;
}

/* font size depends on the viewport width */
main h1 {
  font-family: Oswald;
  font-weight: 100;
  font-size: 2.5vw;
  margin-top: 5px;
  margin-bottom: 5px;
}

#about-main img {
  border: 1px solid black;
}

/* ========================================================================== 
About Section
  - height is equal to 65% of the overall viewport height 
========================================================================== */
#about-section div {
  display: grid;
  grid-gap: 10px;
  grid-template-columns: 1fr 4fr;
  width: 50vw;
  margin: auto;
  text-align: left;
}

#about-section span.title {
  text-align: right;
  font-family: 'Big Shoulders Display';
  font-size: 2vw;
  border-top: 1px solid #ff7f50;
  margin-top: 3px;
}

@media screen and (max-width: 900px) {
  #about-section span.title {
    font-size: 18px;
  }
}

#about-section span.content {
  font-family: calibri;
  font-weight: 100;
}

/* ul has a too large default margin. */
#about-section ul {
  margin: 0;
  list-style-type: square;
}

/* ========================================================================== 
The Grid
========================================================================== */
#grid-section {
  margin-left: 150px;
  margin-right: 150px;
  font-family: calibri;
}

#grid-section>#title {
  font-size: 2vw;
}

/* ul is a block element and so need to turn it into inline-block in order to center it. */
#grid-section ul {
  display: inline-block;
  text-align: left;
  list-style-type: none;
  padding-left: 55px;
  margin-top: 0px;
}

#grid-section ul li {
  margin-top: 7px;
}

#grid-section ul li:last-child {
  margin-top: 10px;
}

#grid-section ul li::before {
  content: url('images/bullet-icon-mini.jpg');
  display: inline-block;
}

#select-div {
  display: inline-block;
  cursor: pointer;
}

#select-div select {
  padding: 3px;
  width: 150px;
  border-radius: .2em;
  font-size: 13px;
  background: linear-gradient(to bottom, #ffffff, orange);
}

/* I chose box-shadow rather then border manipulation to avoid "jitter" */
#select-div select:hover {
  box-shadow: 0 0 2px 2px gray;
  cursor: pointer;
}

#select-div select option {
  background: #ffffcc;
}

hr {
  margin-bottom: 20px;
}

/* ==========================================================================
  - grid-template-columns: auto-fit so the number of elems horizontally changes.
  - fr unit is grid specifc. fraction. The item would grow and shrink basd on the available space.
  - repeat function would repeat a pattern i.e. repeat(3, 1fr); instead of 1fr 1fr 1fr;
  - auto-fit for responsiveness. Can be used with repeat() in order to avoid specifiying a fix number of columns. 
  - minmax function defines the range i.e. from 320px to 1fr
  - grid-gap would set gap between items 
  - the grid determines the WIDTH of the img. Since the imgs are square the HEIGHT would equal the WIDTH.
========================================================================== */
.the-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  grid-gap: 2rem;
}

.grid-item {
  background-color: #f5f5f5;
  border: 1px solid black;
  font-size: 13px;
  text-align: center;
}

/* the img width would fit the parent (div) element 100% */
.grid-item .grid-image {
  width: 100%;
  border-bottom: 1px solid black;
}


/* would transition all properties that their valued changed (trans, color, shadow) */
.grid-item:hover {
  transition: all 0.5s ease-in-out;
  transform: scale(1.1);
  background-color: #ffa500;
  box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.33);
}

figure {
  margin: 0px;
  position: relative;
}

figure .heart {
  position: absolute;
  top: 5px;
  right: 5px;
}

figcaption {
  margin-bottom: 5px;
}

/* ==========================================================================
The Modal
========================================================================== */
.modal {
  display: none;
  /* Hidden by default */
  position: fixed;
  /* Stay in place */
  z-index: 1;
  /* Sit on top when active */
  padding-top: 100px;
  /* Location of the box */
  left: 0;
  top: 0;
  width: 100%;
  /* Full width */
  height: 100%;
  /* Full height */
  background-color: rgba(0, 0, 0, 0.6);
  /* Black w/ opacity */
}

/* Modal Content, img */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 0px 25px 25px 25px;
  width: 25vw;
}

/* Modal image should be the width of the containing div */
.modal-content img {
  width: 100%;
  border: 1px solid black;
}

/* The closeModalBtn Button */
.closeModalBtn {
  color: orange;
  float: right;
  font-size: 20px;
  font-weight: bold;
}

/* Change the close btn color and cursor */
.closeModalBtn:hover,
.closeModalBtn:focus {
  color: black;
  cursor: pointer;
}

/* if lne-height is the same figure as height, element would be centered vertically */
footer {
  font-family: calibri;
  font-style: italic;
  font-size: 15px;
  text-align: center;
  height: 30px;
  line-height: 30px;
  border-top: 1px solid gray;
  margin-top: 50px;
}


footer img {
  vertical-align: middle;
  width: 25px;
}