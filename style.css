:root {
  --orange-color: #ffa500;
  --gray-color: #808080;
}

/* by default, the browser sets some marging. I eliminate it. */
body {
  background-color: #ebebeb;
  margin: 0;
}

/* =============================================================================
  - using flex so elements follow each other horizontally. later on - vertically.
  - sticky position is preferable over fixed since it keeps the element part of the flow. 
  - width of the entire screen
  - z-index will make it on top of any other element (the position property removes it from the normal flow.)
============================================================================= */
header {
  display: flex;
  position: sticky;
  top: 0;
  background: linear-gradient(to right, orange, yellow);
  border-top: 1px solid var(--gray-color);
  border-bottom: 1px solid var(--gray-color);
  width: 100%;
  height: 95px;
  z-index: 1;
}

/* This is an "invisble div". It's used to enlarge the area into which images can be dropped into
(to replace the header's image). Otherwise, the user would have to aim exactly at the circular image. */
header #dragged-into-div {
  position: absolute;
  top: 5px;
  left: 150px;
  width: 200px;
  height: 200px;
}

/* - The element is placed relative to it's containing container at 0,0.
   - The border-radius makes the image round. 
   - The image also has a border, but it's assigned by the javascript. */
header #dragged-into-div #header-img {
  position: absolute;
  left: 0px;
  top: 0px;
  width: 125px;
  border-radius: 50%;
}

/* The header image would change it's style upon being dragged into to create a "hint" for the user. 
the img-hovered class is added and removed upon dragenter() dragleave() events. */
header #dragged-into-div #header-img.img-hovered {
  transition: all 0.5s ease-in-out;
  width: 150px;
  padding: 5px;
}

/* =============================================================================
  - flex would allow me later on to arrange them vertically.
  - margin-left:auto;  would push the element all the way to the right. 
  - "auto" : taking up available space!!!!!!
  - the 100% height would strech the div element to the height of its container.
  - under 600px flex elements are vertically ordered and centered through margin property.
============================================================================= */
header nav {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 150px;
  margin-left: auto;
  height: 100%;
}

/* =============================================================================
For the top navigation menu anchors:
  - no underline 
  - font size depends on the viewport width (1.5vw) but would be at least 15px.
  - I need to  use padding and not margin to show a gap with the border
  - vertical line separator through border-right
============================================================================= */
header nav a {
  text-decoration: none;
  font-family: Oswald;
  font-weight: 100;
  font-size: calc(15px + 1.5vw);
  padding-left: 20px;
  padding-right: 20px;
  color: black;
  height: auto;
  border-right: 2px solid black;
}

/* so the last menu entry doesn't have a vertical line */
header nav a:last-child {
  border-right: none;
}

header nav a:hover {
  color: #ff9900;
}

main {
  text-align: center;
}

/* font size depends on the viewport width */
main h1 {
  font-family: Oswald;
  font-weight: 100;
  font-size: 2.5vw;
  margin-top: 5px;
  margin-bottom: 5px;
}

#about-main>img {
  border: 1px solid black;
}

/* =============================================================================
About Section
  - height is equal to 65% of the overall viewport height 
============================================================================= */
#about-section div {
  display: grid;
  grid-gap: 10px;
  grid-template-columns: 1fr 4fr;
  width: 50vw;
  margin: auto;
  text-align: left;
}

#about-section span.title {
  text-align: right;
  font-family: 'Big Shoulders Display';
  font-size: 2vw;
  border-top: 1px solid #ff7f50;
  margin-top: 3px;
}

#about-section span.content {
  font-family: calibri;
  font-weight: 100;
}

/* ul has a too large default margin. */
#about-section ul {
  margin: 0;
  list-style-type: square;
}

/* =============================================================================
The Grid
============================================================================= */
#grid-section {
  margin-left: 150px;
  margin-right: 150px;
  font-family: calibri;
}

#grid-section>#title {
  font-size: 2vw;
}

/* ul is a block element and so need to turn it into inline-block in order to center it. */
#grid-section ul {
  display: inline-block;
  text-align: left;
  list-style-type: none;
  padding-left: 55px;
  margin-top: 0px;
}

#grid-section ul li {
  margin-top: 7px;
}

#grid-section ul li:last-child {
  margin-top: 10px;
}

#grid-section ul li::before {
  content: url('images/bullet-icon-mini.jpg');
  display: inline-block;
}

#select-div {
  display: inline-block;
  cursor: pointer;
}

#select-div select {
  padding: 3px;
  width: 150px;
  border-radius: .2em;
  font-size: 13px;
  background: linear-gradient(to bottom, #ffffff, orange);
}

/* I chose box-shadow rather then border manipulation to avoid "jitter" */
#select-div select:hover {
  box-shadow: 0 0 2px 2px var(--gray-color);
  cursor: pointer;
}

#select-div select option {
  background: #ffffcc;
}

hr {
  margin-bottom: 20px;
}

/* =============================================================================
  - grid-template-columns: auto-fit so the number of elems horizontally changes.
  - fr unit is grid specifc. fraction. The item would grow and shrink basd on the available space.
  - repeat function would repeat a pattern i.e. repeat(3, 1fr); instead of 1fr 1fr 1fr;
  - auto-fit for responsiveness. Can be used with repeat() in order to avoid specifiying a fix number of columns. 
  - minmax function defines the range i.e. from 320px to 1fr
  - grid-gap would set gap between items 
  - the grid determines the WIDTH of the img. Since the imgs are square the HEIGHT would equal the WIDTH.
============================================================================= */
.the-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  grid-gap: 2rem;
}

.grid-item {
  background-color: #f5f5f5;
  border: 1px solid black;
  font-size: 13px;
  text-align: center;
}

/* the img width would fit the parent (div) element 100% */
.grid-item .grid-image {
  width: 100%;
  border-bottom: 1px solid black;
}


/* would transition all properties that their valued changed (trans, color, shadow) */
.grid-item:hover {
  transition: all 0.5s ease-in-out;
  trans#old-form: scale(1.1);
  background-color: #ffa500;
  box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.33);
}

figure {
  margin: 0px;
  position: relative;
}

figure .heart {
  position: absolute;
  top: 5px;
  right: 5px;
}

figcaption {
  margin-bottom: 5px;
}


/* =============================================================================
The Modal
============================================================================= */
/* 
   - Initally it's hidden with display:none.
   - Blurring the rest of the viewport withe background-color.
   - z-index would place the modal on top when active. */
#modal-container {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* Modal Content, img */
#modal-content {
  position: relative;
  top: 110px;
  background-color: #fefefe;
  margin: auto;
  width: 25vw;
}

#modal-img {
  padding: 25px 25px 25px 25px;
}

/* Modal image should be the width of the containing div */
#modal-img img {
  width: 100%;
  border: 1px solid black;
}

/* The close-modal-btn Button */
.close-modal-btn {
  position: relative;
  right: 5px;
  color: var(--orange-color);
  float: right;
  font-size: 25px;
  font-weight: bold;
}

/* Change the close btn color and cursor */
.close-modal-btn:hover,
.close-modal-btn:focus {
  color: black;
  cursor: pointer;
}

/* If line-height is the same figure as height, element would be centered vertically */
footer {
  text-align: center;
  height: 30px;
  line-height: 30px;
  border-top: 1px solid var(--gray-color);
  margin-top: 50px;
  background-color: #d3d3d3;
}

/* The 1st and last spans r styled 'italic' yet the divider char is not. */
footer span:first-child,
footer span:last-child {
  font-family: calibri;
  font-style: italic;
  font-size: 15px;
}

footer img {
  vertical-align: middle;
  width: 25px;
}

/* =============================================================================
   Fan Form
============================================================================= */
#form-header {
  margin: auto;
  width: 500px;
  font-family: calibri;
  text-align: left;
}

#form-header ul {
  list-style-type: square;
}

/* Center the form on the page */
form {
  margin: auto;
  width: 400px;
  padding: 3em;
  border: 1px solid #cccccc;
  border-radius: 1em;
  background-color: #f8f8f8;
  font-family: calibri;
}

/* place some top margin for all div's except the 1st one */
form div+div {
  margin-top: 1em;
}

form .required {
  color: var(--orange-color);
}

/* since label is an inline element, using inline-block would allow specifying width */
form label {
  display: inline-block;
  width: 80px;
  text-align: right;
}

/* ouline: none; removes the blue outline */
input[type=text],
input[type=email],
input[type=tel],
textarea {
  font: 1em calibri;
  width: 300px;
  box-sizing: border-box;
  border: 1px solid #999;
  box-shadow: 1px 1px 4px #C0C0C0;
  outline: none;
}

/* since all other input element are 300px wide, here there r multiple inputs (radio btns) */
#radio-btns-div {
  display: inline-block;
  text-align: left;
  width: 300px;
}

/* Additional highlight for focused elements */
input:focus,
textarea:focus {
  border: 1px solid #ffad33;
}

/* Align textarea with the labels */
textarea {
  vertical-align: top;
  height: 5em;
}

/* center the submit button. Same size as the label elements */
.button {
  padding-left: 80px;
}

button {
  height: 33px;
}

/* =============================================================================
   Media Queries
============================================================================= */
/* the nav elements should be placed vertically and in the center */
@media screen and (max-width: 900px) {
  header {
    justify-content: center;
  }

  header #dragged-into-div {
    width: 150px;
    left: 50px;
  }

  header #dragged-into-div #header-img {
    width: 105px;
  }

  header nav {
    margin-right: 100px;
  }

  #about-section span.title {
    font-size: 18px;
  }

  #about-section div {
    width: 70vw;
  }

  #grid-section {
    margin-left: 50px;
    margin-right: 50px;
  }

  #form-header {
    width: 400px;
  }

  form {
    width: 300px;
    padding: 1.5em;
  }

  form div {
    text-align: left;
  }

  form label {
    display: block;
    text-align: left;
  }

  form .button {
    padding-left: 100px;
  }
}

@media screen and (max-width: 700px) {
  header {
    height: 75px;
  }

  header #dragged-into-div {
    width: 125px;
    left: 25px;
  }

  header #dragged-into-div #header-img {
    width: 85px;
  }

  header nav {
    margin-right: 25px;
  }

  #about-section div {
    width: 90vw;
  }

  /* the two footer spans are split veritically */
  footer {
    line-height: 20px;
  }

  #footer-divider {
    visibility: hidden;
  }

  #footer-copyright {
    display: block;
  }
}